####################################################################
# Makefile                                                         #
####################################################################

.SUFFIXES:				# ignore builtin rules
.PHONY: all debug release clean

####################################################################
# Definitions                                                      #
####################################################################

# uniq is a function which remove duplicate elements from a list
uniq = $(strip $(if $1,$(firstword $1) \
       $(call uniq,$(filter-out $(firstword $1),$1))))

DEVICE = EFM32GG11B820F2048GL192
PROJECTNAME = micriumos_usbhmsc

ifneq ($(filter $(MAKECMDGOALS),release),)
  OBJ_DIR = $(PROJECTNAME)/Release/build
  EXE_DIR = $(PROJECTNAME)/Release/exe
  LST_DIR = $(PROJECTNAME)/Release/lst
else
  OBJ_DIR = $(PROJECTNAME)/Debug/build
  EXE_DIR = $(PROJECTNAME)/Debug/exe
  LST_DIR = $(PROJECTNAME)/Debug/lst
endif

####################################################################
# Definitions of toolchain.                                        #
# You might need to do changes to match your system setup          #
####################################################################

# Change path to the tools according to your system configuration
# DO NOT add trailing whitespace chars, they do matter !
WINDOWSCS  ?= GNU Tools ARM Embedded\7-2017-q4
LINUXCS    ?= /tool/arm/gcc-arm-none-eabi/4_8-2013q4

RMDIRS     := rm -rf
RMFILES    := rm -rf
MKDIR      := mkdir -p
ALLFILES   := /*.*
NULLDEVICE := /dev/null
SHELLNAMES := $(ComSpec)$(COMSPEC)
PATHSEP    := /

# Command output is hidden by default, it can be enabled by
# setting VERBOSE=true on the commandline.
ifeq ($(VERBOSE),)
  ECHO = @
endif

# Try autodetecting the environment
ifeq ($(SHELLNAMES),)
  # Assume we are making on a Linux platform
  TOOLDIR ?= $(LINUXCS)
else
  QUOTE :="
  ifneq ($(COMSPEC),)
    # Assume we are making on a mingw/msys/cygwin platform running on Windows
    # This is a convenient place to override TOOLDIR, DO NOT add trailing
    # whitespace chars, they do matter !
    TOOLDIR ?= $(PROGRAMFILES)/$(WINDOWSCS)
    ifeq ($(findstring cygdrive,$(shell set)),)
      # We were not on a cygwin platform
      NULLDEVICE := NUL
    endif
  else
    # Assume we are making on a Windows platform
    # This is a convenient place to override TOOLDIR, DO NOT add trailing
    # whitespace chars, they do matter !
    SHELL      := $(SHELLNAMES)
    TOOLDIR    ?= $(ProgramFiles)/$(WINDOWSCS)
    RMDIRS     := rd /s /q
    RMFILES    := del /s /q
    MKDIR      := mkdir
    ALLFILES   := \*.*
    NULLDEVICE := NUL
    PATHSEP    := \\
  endif
endif

# Create directories and do a clean which is compatible with parallell make
$(shell $(MKDIR) $(subst /,$(PATHSEP),$(OBJ_DIR))>$(NULLDEVICE) 2>&1)
$(shell $(MKDIR) $(subst /,$(PATHSEP),$(EXE_DIR))>$(NULLDEVICE) 2>&1)
$(shell $(MKDIR) $(subst /,$(PATHSEP),$(LST_DIR))>$(NULLDEVICE) 2>&1)
ifeq (clean,$(findstring clean, $(MAKECMDGOALS)))
  ifneq ($(filter $(MAKECMDGOALS),all debug release),)
    $(shell $(RMFILES) $(subst /,$(PATHSEP),$(OBJ_DIR)$(ALLFILES))>$(NULLDEVICE) 2>&1)
    $(shell $(RMFILES) $(subst /,$(PATHSEP),$(EXE_DIR)$(ALLFILES))>$(NULLDEVICE) 2>&1)
    $(shell $(RMFILES) $(subst /,$(PATHSEP),$(LST_DIR)$(ALLFILES))>$(NULLDEVICE) 2>&1)
  endif
endif

CC      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-gcc$(QUOTE)
CXX     = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-g++$(QUOTE)
LD      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-ld$(QUOTE)
AR      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-ar$(QUOTE)
OBJCOPY = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-objcopy$(QUOTE)
DUMP    = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-objdump$(QUOTE)

####################################################################
# Flags                                                            #
####################################################################

# -MMD : Don't generate dependencies on system header files.
# -MP  : Add phony targets, useful when a h-file is removed from a project.
# -MF  : Specify a file to write the dependencies to.
DEPFLAGS = -MMD -MP -MF $(@:.o=.d)

#
# Add -Wa,-ahld=$(LST_DIR)/$(@F:.o=.lst) to CFLAGS to produce assembly list files
#
override CFLAGS += -D$(DEVICE) -Wall -Wextra -mcpu=cortex-m4 -mthumb \
-mfloat-abi=softfp -mfpu=fpv4-sp-d16 -ffunction-sections \
-fdata-sections -fomit-frame-pointer -std=c99 -DDEBUG_EFM -DRETARGET_VCOM -DRETARGET_UART0  \
$(DEPFLAGS)

override CXXFLAGS += -D$(DEVICE) -Wall -Wextra -mcpu=cortex-m4 -mthumb \
-mfloat-abi=softfp -mfpu=fpv4-sp-d16 -fno-builtin -fno-rtti -fno-exceptions \
-ffunction-sections -fdata-sections -fomit-frame-pointer -std=c++11 -DDEBUG_EFM -DRETARGET_VCOM -DRETARGET_UART0  \
$(DEPFLAGS)

override ASMFLAGS += -x assembler-with-cpp -D$(DEVICE) -Wall -Wextra -mcpu=cortex-m4 -mthumb \
-mfloat-abi=softfp -mfpu=fpv4-sp-d16 -DDEBUG_EFM -DRETARGET_VCOM -DRETARGET_UART0  $(DEPFLAGS)

#
# NOTE: The -Wl,--gc-sections flag may interfere with debugging using gdb.
#
override LDFLAGS += -Xlinker -Map=$(LST_DIR)/$(PROJECTNAME).map -mcpu=cortex-m4 \
-mthumb -mfloat-abi=softfp -mfpu=fpv4-sp-d16 \
-T../../../../../platform/Device/SiliconLabs/EFM32GG11B/Source/GCC/efm32gg11b.ld \
 --specs=nano.specs -Wl,--gc-sections 

LIBS = -Wl,--start-group -lgcc -lc -lnosys   -Wl,--end-group

INCLUDEPATHS += \
-I.. \
-I../../../../../platform/CMSIS/Include \
-I../../../../../platform/Device/SiliconLabs/EFM32GG11B/Include \
-I../../../../../platform/emlib/inc \
-I../../../../../hardware/kit/common/bsp \
-I../../../../../hardware/kit/common/drivers \
-I../../../../../hardware/kit/SLSTK3701A_EFM32GG11/config \
-I../../../../../platform/micrium_os \
-I../../../../../platform/micrium_os/bsp/siliconlabs/generic/include \
-I../cfg \
-I.. \
-I../../../../../util/third_party/segger/systemview/SEGGER \
-I../../../../../util/third_party/segger/systemview/Config \
-I../../../../../util/third_party/segger/systemview/Sample/MicriumOSKernel

####################################################################
# Files                                                            #
####################################################################

C_CXX_SRC +=  \
../../../../../platform/Device/SiliconLabs/EFM32GG11B/Source/system_efm32gg11b.c \
../../../../../hardware/kit/common/bsp/bsp_bcc.c \
../../../../../hardware/kit/common/bsp/bsp_stk.c \
../../../../../hardware/kit/common/bsp/bsp_stk_leds.c \
../../../../../hardware/kit/common/bsp/bsp_trace.c \
../../../../../platform/micrium_os/bsp/siliconlabs/generic/source/bsp_cpu.c \
../../../../../platform/micrium_os/bsp/siliconlabs/generic/source/bsp_os.c \
../../../../../platform/micrium_os/bsp/siliconlabs/generic/source/bsp_usb_host_pbhcd.c \
../../../../../platform/emlib/src/em_assert.c \
../../../../../platform/emlib/src/em_core.c \
../../../../../platform/emlib/src/em_cmu.c \
../../../../../platform/emlib/src/em_emu.c \
../../../../../platform/emlib/src/em_gpio.c \
../../../../../platform/emlib/src/em_system.c \
../../../../../platform/emlib/src/em_usart.c \
../../../../../platform/micrium_os/common/source/auth/auth.c \
../../../../../platform/micrium_os/common/source/clk/clk.c \
../../../../../platform/micrium_os/common/source/clk/clk_cmd.c \
../../../../../platform/micrium_os/common/source/collections/bitmap.c \
../../../../../platform/micrium_os/common/source/collections/map.c \
../../../../../platform/micrium_os/common/source/collections/slist.c \
../../../../../platform/micrium_os/common/source/common/common.c \
../../../../../platform/micrium_os/common/source/kal/kal_kernel.c \
../../../../../platform/micrium_os/common/source/lib/lib_ascii.c \
../../../../../platform/micrium_os/common/source/lib/lib_math.c \
../../../../../platform/micrium_os/common/source/lib/lib_mem.c \
../../../../../platform/micrium_os/common/source/lib/lib_str.c \
../../../../../platform/micrium_os/common/source/rtos/rtos_err_str.c \
../../../../../platform/micrium_os/common/source/platform_mgr/platform_mgr.c \
../../../../../platform/micrium_os/common/source/op_lock/op_lock.c \
../../../../../platform/micrium_os/cpu/source/cpu_core.c \
../../../../../platform/micrium_os/ports/source/generic/armv6m_v7m_cpu_int.c \
../../../../../platform/micrium_os/drivers/usb/source/host_pbhcds/usbh_pbhcd_dwc_otg_fs.c \
../../../../../hardware/kit/common/drivers/retargetio.c \
../../../../../hardware/kit/common/drivers/retargetserial.c \
../../../../../platform/micrium_os/kernel/source/os_core.c \
../../../../../platform/micrium_os/kernel/source/os_cfg_app.c \
../../../../../platform/micrium_os/kernel/source/os_dbg.c \
../../../../../platform/micrium_os/kernel/source/os_flag.c \
../../../../../platform/micrium_os/kernel/source/os_mem.c \
../../../../../platform/micrium_os/kernel/source/os_mon.c \
../../../../../platform/micrium_os/kernel/source/os_msg.c \
../../../../../platform/micrium_os/kernel/source/os_mutex.c \
../../../../../platform/micrium_os/kernel/source/os_prio.c \
../../../../../platform/micrium_os/kernel/source/os_q.c \
../../../../../platform/micrium_os/kernel/source/os_sem.c \
../../../../../platform/micrium_os/kernel/source/os_stat.c \
../../../../../platform/micrium_os/kernel/source/os_task.c \
../../../../../platform/micrium_os/kernel/source/os_tick.c \
../../../../../platform/micrium_os/kernel/source/os_time.c \
../../../../../platform/micrium_os/kernel/source/os_tmr.c \
../../../../../platform/micrium_os/kernel/source/os_var.c \
../../../../../platform/micrium_os/ports/source/gnu/armv7m_os_cpu_c.c \
../../../../../platform/micrium_os/fs/source/storage/fs_storage.c \
../../../../../platform/micrium_os/fs/source/storage/fs_blk_dev.c \
../../../../../platform/micrium_os/fs/source/storage/fs_media.c \
../../../../../platform/micrium_os/fs/source/storage/ramdisk/fs_ramdisk.c \
../../../../../platform/micrium_os/fs/source/storage/scsi/fs_scsi.c \
../../../../../platform/micrium_os/fs/source/shared/fs_obj.c \
../../../../../platform/micrium_os/fs/source/shared/fs_utils.c \
../../../../../platform/micrium_os/fs/source/core/fs_core.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_buddy_alloc.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_cache.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_entry.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_file.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_list.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_vol.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_partition.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_job_sched.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_op.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_unicode.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_dir.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_working_dir.c \
../../../../../platform/micrium_os/fs/source/core/fs_core_posix.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat_dir.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat_entry.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat_file.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat_lfn.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat_journal.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat_vol.c \
../../../../../platform/micrium_os/fs/source/sys/fat/fs_fat_fatxx.c \
../../../../../platform/micrium_os/fs/source/sys/fs_sys.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core_dev.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core_ep.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core_hub.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core_class.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core_config.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core_fnct.c \
../../../../../platform/micrium_os/usb/source/host/core/usbh_core_if.c \
../../../../../platform/micrium_os/usb/source/host/hcd/usbh_pbhci.c \
../../../../../platform/micrium_os/usb/source/host/class/usbh_msc.c \
../../../../../platform/micrium_os/usb/source/host/class/usbh_class_common.c \
../../../../../platform/micrium_os/usb/source/usb_ctrlr.c \
../../../../../util/third_party/segger/systemview/SEGGER/SEGGER_RTT.c \
../../../../../util/third_party/segger/systemview/SEGGER/SEGGER_SYSVIEW.c \
../../../../../util/third_party/segger/systemview/Sample/MicriumOSKernel/SEGGER_SYSVIEW_MicriumOSKernel.c \
../cfg/SEGGER_SYSVIEW_Config_MicriumOSKernel.c \
../ex_main.c \
../common/common/ex_common_init.c \
../fs/ex_fs.c \
../fs/ex_fs.h \
../fs/ex_fs_media_poll.c \
../fs/ex_fs_media_poll.h \
../fs/ex_fs_utils.h \
../usb/host/ex_usbh.c \
../usb/host/ex_usbh_msc.c

s_SRC += 

S_SRC +=  \
../../../../../platform/Device/SiliconLabs/EFM32GG11B/Source/GCC/startup_efm32gg11b.S \
../../../../../platform/micrium_os/ports/source/gnu/armv7m_cpu_a.S \
../../../../../platform/micrium_os/ports/source/gnu/armv7m_os_cpu_a.S

C_SRC = $(filter %.c, $(C_CXX_SRC))
CXX_SRC = $(filter %.cpp, $(C_CXX_SRC))

####################################################################
# Rules                                                            #
####################################################################

C_FILES = $(notdir $(C_SRC) )
CXX_FILES = $(notdir $(CXX_SRC) )
S_FILES = $(notdir $(S_SRC) )
s_FILES = $(notdir $(s_SRC) )
#make list of source paths, uniq removes duplicate paths
C_PATHS = $(call uniq, $(dir $(C_SRC) ) )
CXX_PATHS = $(call uniq, $(dir $(CXX_SRC) ) )
S_PATHS = $(call uniq, $(dir $(S_SRC) $(s_SRC) ) )

C_OBJS = $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.o))
CXX_OBJS = $(addprefix $(OBJ_DIR)/, $(CXX_FILES:.cpp=.o))
S_OBJS = $(if $(S_SRC), $(addprefix $(OBJ_DIR)/, $(S_FILES:.S=.o)))
s_OBJS = $(if $(s_SRC), $(addprefix $(OBJ_DIR)/, $(s_FILES:.s=.o)))
C_DEPS = $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.d))
CXX_DEPS = $(addprefix $(OBJ_DIR)/, $(CXX_FILES:.cpp=.d))
S_DEPS = $(addprefix $(OBJ_DIR)/, $(S_FILES:.S=.d))
s_DEPS = $(addprefix $(OBJ_DIR)/, $(s_FILES:.s=.d))
OBJS = $(C_OBJS) $(CXX_OBJS) $(S_OBJS) $(s_OBJS)

vpath %.c $(C_PATHS)
vpath %.cpp $(CXX_PATHS)
vpath %.s $(S_PATHS)
vpath %.S $(S_PATHS)

# Default build is debug build
all:      debug

debug:    CFLAGS += -DDEBUG -O0 -g
debug:    $(EXE_DIR)/$(PROJECTNAME).bin

release:  CFLAGS += -DNDEBUG -O0 -g
release:  $(EXE_DIR)/$(PROJECTNAME).bin

# Create objects from C SRC files
$(OBJ_DIR)/%.o: %.c
	@echo "Building file: $<"
	$(ECHO)$(CC) $(CFLAGS) $(INCLUDEPATHS) -c -o $@ $<

# Create objects from CXX SRC files
$(OBJ_DIR)/%.o: %.cpp
	@echo "Building file: $<"
	$(ECHO)$(CXX) $(CXXFLAGS) $(INCLUDEPATHS) -c -o $@ $<

# Assemble .s/.S files
$(OBJ_DIR)/%.o: %.s
	@echo "Assembling $<"
	$(ECHO)$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

$(OBJ_DIR)/%.o: %.S
	@echo "Assembling $<"
	$(ECHO)$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

# Link
$(EXE_DIR)/$(PROJECTNAME).out: $(OBJS)
	@echo "Linking target: $@"
	$(ECHO)$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $(EXE_DIR)/$(PROJECTNAME).out

# Create binary file
$(EXE_DIR)/$(PROJECTNAME).bin: $(EXE_DIR)/$(PROJECTNAME).out
	@echo "Creating binary file: $@"
	$(ECHO)$(OBJCOPY) -O binary $(EXE_DIR)/$(PROJECTNAME).out $(EXE_DIR)/$(PROJECTNAME).bin
# Uncomment next line to produce assembly listing of entire program
#	$(DUMP) -h -S -C $(EXE_DIR)/$(PROJECTNAME).out>$(LST_DIR)/$(PROJECTNAME)out.lst

clean:
ifeq ($(filter $(MAKECMDGOALS),all debug release),)
	$(RMDIRS) $(PROJECTNAME)
endif

# include auto-generated dependency files (explicit rules)
ifneq (clean,$(findstring clean, $(MAKECMDGOALS)))
-include $(C_DEPS)
-include $(CXX_DEPS)
-include $(S_DEPS)
-include $(s_DEPS)
endif
