name=NVM3 External Flash Library
description=The NVM3 provides a means to store and retrieve objects (key/value pair) from the flash and provides wear leveling to reduce erase and write cycles to maximise the lifetime of the flash pages. Objects in NVM3 can either be accessed directly through the native NVM3 API or through the token API in the same way as SimEE1 or SimEE2 based tokens. This library plugin places the NVM3 token storage in external flash allowing minimal internal flash usage. NVM3 accesses the external flash through the Gecko Bootloader, hence a compatible bootloader is required. More information on how to configure the bootloader and use this library is provided in Application Note AN1135. For information on the Gecko Bootloader, please read User's Guide UG266. The start address and size of the external flash NVM3 space can be configured by this plugin and these settings must be set to not overlap with any storage slots configured by the Gecko Bootloader. IMPORTANT When compiling for a device with an external flash which already contains NVM3 data, the external flash space configured for the compilation must match the external flash space used for the existing NVM3 instance on the device. This plugin is beta tested only. Silicon Labs will NOT support any production deployments with this Beta release. Production deployments will only be supported with the GA version of NVM3 in external flash. This version is intended for lab and evaluation purpose only.
category=HAL

qualityString=Beta Release
quality=development

architecture=efr32, simulation

providedApis=nvm3, token-storage, ble-token-storage

requiredApis=zigbee-pro

api.nvm3.header= $HAL/plugin/nvm3/nvm3-token.h

libraryFiles(efr32~series[1]+iar)=$EMDRV/nvm3/lib/libnvm3_enc_zigbee_CM4_iar.a
libraryFiles(efr32~series[1]+gcc)=$EMDRV/nvm3/lib/libnvm3_enc_zigbee_CM4_gcc.a
libraryFiles(efr32~series[2]+iar)=$EMDRV/nvm3/lib/libnvm3_enc_zigbee_CM33_iar.a
libraryFiles(efr32~series[2]+gcc)=$EMDRV/nvm3/lib/libnvm3_enc_zigbee_CM33_gcc.a

$EMDRV/nvm3/src/nvm3_default_extflash.c (efr32)
$EMDRV/nvm3/src/nvm3_hal_extflash.c     (efr32)
$EMDRV/nvm3/src/nvm3_lock.c
$ZIGBEE/app/util/secure-ezsp/802-15-4-ccm.c

setup(additionalFiles) {
  PATH(ABSOLUTE):$ZIGBEE/app/util/secure-ezsp
  PATH(ABSOLUTE):$EMDRV/nvm3/inc
}

options=startAddr, flashSize, cacheSize, maxObjectSize, userRepackHeadroom

startAddr.name=External Flash NVM3 Start Address
startAddr.description= Start address of the NVM3 storage in external flash.
startAddr.type=NUMBER
startAddr.macro=-DNVM3_DEFAULT_NVM_START
startAddr.default=487424

flashSize.name=External Flash NVM3 Size
flashSize.description= Number of bytes of external flash to use for data storage in NVM3. When compiling for a connected flash which already contains NVM3 data, the number of flash bytes configured for the compilation must match the number of flash bytes used for the existing NVM3 instance on the device. The number of bytes configured must match the number of bytes for a whole number of flash pages of the flash device.
flashSize.type=NUMBER
flashSize.macro=-DNVM3_DEFAULT_NVM_SIZE
flashSize.default=36864

cacheSize.name=Cache Size
cacheSize.description= Number of NVM3 objects to cache. To reduce access times this number should be equal to or higher than the number of NVM3 objects in the default NVM3 instance, including tokens.
cacheSize.type=NUMBER
cacheSize.macro=-DNVM3_DEFAULT_CACHE_SIZE
cacheSize.default=200

maxObjectSize.name=Max Object Size
maxObjectSize.description= Max NVM3 object size that can be stored. Note that only objects with size up to 254 bytes can be defined and accessed through the token API. For larger objects the native NVM3 API must be used.
maxObjectSize.type=NUMBER:208,4096
maxObjectSize.macro=-DNVM3_MAX_OBJECT_SIZE
maxObjectSize.default=254

userRepackHeadroom.name=User Repack Headroom
userRepackHeadroom.description= Headroom determining how many bytes below the forced repack limit the user repack limit should be placed. The default is 0, which means the user and forced repack limits are equal.
userRepackHeadroom.type=NUMBER
userRepackHeadroom.macro=-DNVM3_DEFAULT_REPACK_HEADROOM
userRepackHeadroom.default=0

setup(macros) {
    -DUSE_NVM3
    -DNVM3_EXTFLASH
    -DNVM3_SUPPORT_ENCRYPTION
  }

setup(template) {
  simeepromSize=0
}
