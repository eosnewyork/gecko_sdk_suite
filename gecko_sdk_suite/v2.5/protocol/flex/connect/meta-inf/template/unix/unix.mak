# This file was generated by Ember Desktop from the following template:
#   connect/meta-inf/template/unix/unix.mak
# Please do not edit it directly.

STACK_PATH = $--frameworkDirFromProjFs--$/plugins

GLOBAL_STACK_DIR = $--frameworkDirFromProjFs--$/..
GLOBAL_BASE_DIR = $--halDirFromProjFs--$/..

.SUFFIXES:

E_CC ?= gcc
CC = $(E_CC)
LD = $(E_CC)
SHELL = /bin/sh

DEFINES = \
	-DEMBER_STACK_CONNECT \
	-DHAL_MICRO \
	-DUNIX \
	-DUNIX_HOST \
	-DPHY_NULL \
	-DCONFIGURATION_HEADER=\"$--generatedHeader--$\" \
	-DPLATFORM_HEADER=\"$(GLOBAL_BASE_DIR)/hal/micro/unix/compiler/gcc.h\" \
	-DAPP_BAUD_RATE=BAUD_115200 \
	-DAPP_SERIAL=0 \
	-DEMBER_ASSERT_SERIAL_PORT=0 \
	-DEMBER_SERIAL0_BLOCKING \
	-DEMBER_SERIAL0_MODE=EMBER_SERIAL_FIFO \
	-DEMBER_SERIAL0_TX_QUEUE_SIZE=128 \
	-DEMBER_SERIAL0_RX_QUEUE_SIZE=128 \
$--dashDMacrosMak:"\"--$

INCLUDES = \
	-I. \
	-I$(GLOBAL_BASE_DIR) \
	-I$(GLOBAL_BASE_DIR)/hal \
	-I$(GLOBAL_BASE_DIR)/hal/micro/generic \
	-I$(GLOBAL_BASE_DIR)/hal/micro/unix/host \
	-I$(GLOBAL_BASE_DIR)/hal/micro/unix/simulation \
	-I$(GLOBAL_STACK_DIR)                  \
	-I$(STACK_PATH)                        \
	-I$(STACK_PATH)/stack/                 \
	-I$(STACK_PATH)/stack/include/         \
	-I$(APPLICATION_DIR)                   \
	-I$(GLOBAL_BASE_DIR)                   \
	-I$(GLOBAL_BASE_DIR)/hal               \
	-I$(GLOBAL_BASE_DIR)/hal/plugin        \
	-I$--stackDirFromProjFs--$/connect     \
$--includePathsMak--$


STACK_FILES = \
$--includeFilesMak--$

APP_LIBRARIES = \
$--includeLibFilesMak--$

ARCHITECTURE_DIR = $--deviceName--$-unix-host
OUTPUT_DIR = build-$(ARCHITECTURE_DIR)

# Build a list of object files from the source file list, but all objects
# live in the $(OUTPUT_DIR) above.  The list of object files
# created assumes that the file part of the filepath is unique
# (i.e. the bar.c of foo/bar.c is unique across all sub-directories included).
APPLICATION_OBJECTS = $(addprefix $(OUTPUT_DIR)/, $(notdir $(APPLICATION_FILES:.c=.o)))
STACK_OBJECTS = $(addprefix $(OUTPUT_DIR)/, $(notdir $(STACK_FILES:.c=.o)))
VPATH = $(dir $(APPLICATION_FILES)) $(dir $(STACK_FILES))

APP_FILE= $(OUTPUT_DIR)/$--deviceName--$-unix-host-app

CPPFLAGS= $(INCLUDES) $(DEFINES) $(OPTIONS)
LINK_FLAGS= \
	-L/usr/local/lib

# Rules

all: $(APP_FILE)

ifneq ($(MAKECMDGOALS),clean)
-include $(APPLICATION_OBJECTS:.o=.d)
-include $(STACK_OBJECTS:.o=.d)
endif

$(APP_FILE): $(APPLICATION_OBJECTS) $(STACK_OBJECTS) $(APP_LIBRARIES) | $(OUTPUT_DIR)
	$(LD) $^ $(LINK_FLAGS) $(APP_LIBRARIES) -o $(APP_FILE)
	@echo -e '\n$@ build success'

$(OUTPUT_DIR)/%.o: %.c | $(OUTPUT_DIR)
	$(CC) $(CPPFLAGS) -MF $(@:.o=.d) -MMD -MP -c $< -o $@

clean:
	rm -rf $(OUTPUT_DIR)

$(OUTPUT_DIR):
	@mkdir $(OUTPUT_DIR)

