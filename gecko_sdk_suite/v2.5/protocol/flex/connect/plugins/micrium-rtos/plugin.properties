name=Micrium RTOS
description=This plugin provides Micrium OS support. If this plugin is enabled, the stack will be running within Micrium OS as a Micrium OS task and the application framework will run as a separate task. APIs are invoked at the application framework using an IPC, similarly stack callbacks are communicated to the application framework task using an IPC. The application can also define up to 3 custom Micrium OS tasks.

category=Connect HAL
qualityString=Production Ready
quality=production
includedByDefault=false

architecture=efr32~series[1]

providedApis=os,rtos,micrium-rtos,idle-sleep

api.micrium-rtos.header=micrium-rtos-support.h

callbacks=callbacks.info

# This makes the plugin not throw an error if files are missing, but only show it as disabled.
missingFileHandling=disable

sourceFiles=
# Main
micrium-rtos-support.c
micrium-rtos-sleep.c
micrium-rtos-ipc-common.c
micrium-rtos-ipc-api-gen.c
micrium-rtos-ipc-cb-gen.c
micrium-rtos-vncp-task.c
micrium-rtos-af-task.c

# OS application hooks: these could be generated in the future.
os_app_hooks.c

# Micrium generic Silicon Labs BSP files.
$MICRIUM_OS/bsp/siliconlabs/generic/source/bsp_cpu.c
$MICRIUM_OS/bsp/siliconlabs/generic/source/bsp_os.c
$MICRIUM_OS/bsp/siliconlabs/generic/source/bsp_tick_rtcc.c

# Micrium RTOS common files.
$MICRIUM_OS/common/source/rtos/rtos_err_str.c

# Micrium RTOS common KAL files.
$MICRIUM_OS/common/source/kal/kal_kernel.c

# Micrium CPU core files (common to all platforms and compilers)
$MICRIUM_OS/cpu/source/cpu_core.c

# Micrium RTOS Kernel files (common to all platforms and compilers)
$MICRIUM_OS/kernel/source/os_cfg_app.c
$MICRIUM_OS/kernel/source/os_core.c
$MICRIUM_OS/kernel/source/os_dbg.c
$MICRIUM_OS/kernel/source/os_flag.c
$MICRIUM_OS/kernel/source/os_mem.c
$MICRIUM_OS/kernel/source/os_mon.c
$MICRIUM_OS/kernel/source/os_msg.c
$MICRIUM_OS/kernel/source/os_mutex.c
$MICRIUM_OS/kernel/source/os_prio.c
$MICRIUM_OS/kernel/source/os_q.c
$MICRIUM_OS/kernel/source/os_sem.c
$MICRIUM_OS/kernel/source/os_stat.c
$MICRIUM_OS/kernel/source/os_task.c
$MICRIUM_OS/kernel/source/os_tick.c
$MICRIUM_OS/kernel/source/os_time.c
$MICRIUM_OS/kernel/source/os_tmr.c
$MICRIUM_OS/kernel/source/os_var.c

# Micrium RTOS Lib files (common to all platforms and compilers)
$MICRIUM_OS/common/source/lib/lib_ascii.c
$MICRIUM_OS/common/source/lib/lib_math.c
$MICRIUM_OS/common/source/lib/lib_mem.c
$MICRIUM_OS/common/source/lib/lib_str.c

# ARMv7-M specific CPU files (all compilers)
$MICRIUM_OS/ports/source/generic/armv6m_v7m_cpu_int.c (efr32)

# ARMv7-M specific CPU files (IAR)
$MICRIUM_OS/ports/source/iar/armv7m_os_cpu_c.c        (efr32+iar)
$MICRIUM_OS/ports/source/iar/armv7m_os_cpu_a.asm      (efr32+iar)
$MICRIUM_OS/ports/source/iar/armv7m_cpu_c.c           (efr32+iar)
$MICRIUM_OS/ports/source/iar/armv7m_cpu_a.asm         (efr32+iar)

# ARMv7-M specific CPU files (GCC)
$MICRIUM_OS/ports/source/gnu/armv7m_os_cpu_a.S        (efr32+gcc)
$MICRIUM_OS/ports/source/gnu/armv7m_os_cpu_c.c        (efr32+gcc)
$MICRIUM_OS/ports/source/gnu/armv7m_cpu_a.S           (efr32+gcc)
$MICRIUM_OS/ports/source/gnu/armv7m_cpu_c.c           (efr32+gcc)

setup(additionalFiles) {
  # Micrium config headers
  PATH(ABSOLUTE):$FRAMEWORK/plugins/micrium-rtos/config
  PATH(ABSOLUTE):$MICRIUM_OS/
  PATH(ABSOLUTE):$MICRIUM_OS/bsp/include
  PATH(ABSOLUTE):$MICRIUM_OS/bsp/siliconlabs/generic/include
  PATH(ABSOLUTE):$MICRIUM_OS/kernel/include
  PATH(ABSOLUTE):$MICRIUM_OS/common/include
}

setup(macros){
  -DMICRIUMOS
  -DSKIP_API_RENAME
}

options=cpuUsage,connectStackSize,appFrameworkStackSize,pollCli,      \
  sleepEnable,useButtons,maxCallbackQueueSize,                        \
  appTask1,appTask1StackSize,appTask1Priority,                        \
  appTask2,appTask2StackSize,appTask2Priority,                        \
  appTask3,appTask3StackSize,appTask3Priority

cpuUsage.name=CPU usage tracking
cpuUsage.description=If this option is enabled, the OS will keep track of CPU usage required from uc/Probe.
cpuUsage.type=BOOLEAN
cpuUsage.default=true

connectStackSize.name=Connect Task call stack size
connectStackSize.description=The size in 32-bit words of the Connect task call stack
connectStackSize.type=NUMBER:250,5000
connectStackSize.default=1000

appFrameworkStackSize.name=Application Framework Task call stack size
appFrameworkStackSize.description=The size in 32-bit words of the Application Framework task call stack
appFrameworkStackSize.type=NUMBER:200,5000
appFrameworkStackSize.default=500

pollCli.name=Poll CLI
pollCli.description=If this option is enabled, the application framework task is kept awake often enough to guarantee CLI responsiveness.
pollCli.type=BOOLEAN
pollCli.default=true

sleepEnable.name=Enable EM1/EM2
sleepEnable.description=If this option is enabled, the OS will attempt to enter EM1 or EM2 low power modes whenever possible
sleepEnable.type=BOOLEAN
sleepEnable.default=false

useButtons.name=Use button to force wakeup or allow sleep
useButtons.description=This will setup the hardware buttons to wake-up or allow the device to go to sleep.  Button 0 will force the device to wake up and stay awake.  Button 1 will turn off this behavior to allow the device to sleep normally. Please note that in order for this option to be fully functional, button 0 and button 1 have to be configured to wake the device from sleep.
useButtons.type=BOOLEAN
useButtons.default=false
useButtons.callbacks=emberAfHalButtonIsrCallback
useButtons.dependsOn=sleepEnable

maxCallbackQueueSize.name=Max callback queue size
maxCallbackQueueSize.description=The maximum number of simultaneous callback messages from the stack task to the application tasks.
maxCallbackQueueSize.type=NUMBER:5,20
maxCallbackQueueSize.default=10

appTask1.name=Application Task (1)
appTask1.description=Enable/disable the Application (1) Task
appTask1.type=BOOLEAN
appTask1.default=false

appTask1StackSize.name=Application Task (1) call stack size
appTask1StackSize.description=The size in 32-bit words of the Application (1) Task call stack
appTask1StackSize.type=NUMBER:64,5000
appTask1StackSize.default=200
appTask1StackSize.dependsOn=appTask1

appTask1Priority.name=Application Task (1) priority
appTask1Priority.description=The priority of the Application (1) Task
appTask1Priority.type=NUMBER:7,14
appTask1Priority.default=7
appTask1Priority.dependsOn=appTask1

appTask2.name=Application Task (2)
appTask2.description=Enable/disable the Application (2) Task
appTask2.type=BOOLEAN
appTask2.default=false

appTask2StackSize.name=Application Task (2) call stack size
appTask2StackSize.description=The size in 32-bit words of the Application (2) Task call stack
appTask2StackSize.type=NUMBER:64,5000
appTask2StackSize.default=200
appTask2StackSize.dependsOn=appTask2

appTask2Priority.name=Application Task (2) priority
appTask2Priority.description=The priority of the Application (2) Task
appTask2Priority.type=NUMBER:7,14
appTask2Priority.default=7
appTask2Priority.dependsOn=appTask2

appTask3.name=Application Task (3)
appTask3.description=Enable/disable the Application (3) Task
appTask3.type=BOOLEAN
appTask3.default=false

appTask3StackSize.name=Application Task (3) call stack size
appTask3StackSize.description=The size in 32-bit words of the Application (3) Task call stack
appTask3StackSize.type=NUMBER:64,5000
appTask3StackSize.default=200
appTask3StackSize.dependsOn=appTask3

appTask3Priority.name=Application Task (3) priority
appTask3Priority.description=The priority of the Application (3) Task
appTask3Priority.type=NUMBER:7,14
appTask3Priority.default=7
appTask3Priority.dependsOn=appTask3

  setup(bookkeeping) {
    stackIsr=emberAfPluginMicriumRtosStackIsr
    markApplicationBuffers=emAfPluginMicriumRtosMarkBuffersCallback
  }