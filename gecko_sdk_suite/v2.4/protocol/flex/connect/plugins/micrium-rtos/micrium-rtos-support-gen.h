// *******************************************************************
// * micrium-rtos-support-gen.h
// *
// *
// * Copyright 2018 Silicon Laboratories, Inc.                              *80*
// *******************************************************************
//
// *** Generated file. Do not edit! ***
//
// vNCP Version: 1.0

// These 2 defines should be generated by actually setting them to the maximum
// needed size for both APIs and stack callbacks. For now they are set to some
// large value.
#define MAX_STACK_API_COMMAND_SIZE                      160
#define MAX_STACK_CALLBACK_COMMAND_SIZE                 160

void emAfPluginMicriumStackStatusHandler(EmberStatus status);
void emAfPluginMicriumChildJoinHandler(EmberNodeType nodeType,
                                       EmberNodeId nodeId);
void emAfPluginMicriumRadioNeedsCalibratingHandler();
void emAfPluginMicriumStackIsrHandler();
bool emAfPluginMicriumStackIdleHandler(uint32_t *idleTimeMs);
void emAfPluginMicriumMessageSentHandler(EmberStatus status,
                                         EmberOutgoingMessage *message);
void emAfPluginMicriumIncomingMessageHandler(EmberIncomingMessage *message);
void emAfPluginMicriumIncomingMacMessageHandler(EmberIncomingMacMessage *message);
void emAfPluginMicriumMacMessageSentHandler(EmberStatus status,
                                            EmberOutgoingMacMessage *message);
void emAfPluginMicriumIncomingBeaconHandler(EmberPanId panId,
                                            EmberNodeId nodeId,
                                            int8_t rssi,
                                            bool permitJoining,
                                            uint8_t payloadLength,
                                            uint8_t *payload);
void emAfPluginMicriumIncomingBeaconExtendedHandler(EmberPanId panId,
                                                    EmberMacAddress *source,
                                                    int8_t rssi,
                                                    bool permitJoining,
                                                    uint8_t beaconFieldsLength,
                                                    uint8_t *beaconFields,
                                                    uint8_t beaconPayloadLength,
                                                    uint8_t *beaconPayload);
void emAfPluginMicriumActiveScanCompleteHandler();
void emAfPluginMicriumEnergyScanCompleteHandler(int8_t mean,
                                                int8_t min,
                                                int8_t max,
                                                uint16_t variance);
void emAfPluginMicriumFrequencyHoppingStartClientCompleteHandler(EmberStatus status);
